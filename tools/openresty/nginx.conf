#user  nobody;
worker_processes  8;

error_log  /var/log/openresty/error.log;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  60000;
    use epoll;
}

stream {
    include nginx_conf_white/layer4/*.conf;
}

http {
    client_header_buffer_size 128k;
    #large_client_header_buffers 32 128k;
    #proxy_buffer_size 128k;
    #proxy_buffers 32 32k;
    #proxy_busy_buffers_size 120k;
    fastcgi_buffer_size 128k;
    underscores_in_headers on;
    proxy_ignore_client_abort   on; 
    fastcgi_buffers 4 128k;
    #lua_shared_dict ip_token_hash 64m;
    lua_package_path "/usr/local/openresty/site/lualib/lua-resty-feishu-auth/lib/?.lua;/usr/local/openresty/site/lualib/lua-resty-http/lib/?.lua;/usr/local/openresty/nginx/conf/lua/lua-resty-upstream-healthcheck/lib/?.lua;;";
    include       mime.types;
    default_type  application/octet-stream;
    client_max_body_size 40G;
    map_hash_bucket_size 64;
    server_names_hash_bucket_size 128;
    # Header: Vehicle-Name, nginx log: vehicle_name
    log_format main   '{"@timestamp":"$time_iso8601",'
                      '"@source":"$server_addr",'
                      '"hostname":"$hostname",'
                      '"remote_user":"$remote_user",'
                      '"ip":"$http_x_forwarded_for",'
                      '"client":"$remote_addr",'
                      '"request_method":"$request_method",'
                      '"scheme":"$scheme",'
                      '"domain":"$server_name",'
                      '"referer":"$http_referer",'
                      '"request":"$request_uri",'
                      '"requesturl":"$request",'
                      '"args":"$args",'
                      '"size":$body_bytes_sent,'
                      '"status": $status,'
                      '"responsetime":$request_time,'
                      '"upstreamtime":"$upstream_response_time",'
                      '"upstreamaddr":"$upstream_addr",'
                      '"http_user_agent":"$http_user_agent"'
                      '}';
    log_format main_veh   '{"@timestamp":"$time_iso8601",'
                      '"@source":"$server_addr",'
                      '"hostname":"$hostname",'
                      '"remote_user":"$remote_user",'
                      '"ip":"$http_x_forwarded_for",'
                      '"client":"$remote_addr",'
                      '"request_method":"$request_method",'
                      '"scheme":"$scheme",'
                      '"domain":"$server_name",'
                      '"referer":"$http_referer",'
                      '"request":"$request_uri",'
                      '"requesturl":"$request",'
                      '"args":"$args",'
                      '"size":$body_bytes_sent,'
                      '"status": $status,'
                      '"responsetime":$request_time,'
                      '"upstreamtime":"$upstream_response_time",'
                      '"upstreamaddr":"$upstream_addr",'
                      '"http_user_agent":"$http_user_agent",'
                      '"request_size":$request_length,'
                      '"vehicle_name":"$http_Vehicle_name",'
                      '"x_request_id":"$upstream_http_x_request_id"'
                      '}';

    map $http_upgrade $connection_upgrade {
        default upgrade;
        ""      close;
    }

    map $remote_addr $proxy_forwarded_elem {
        # IPv4 addresses can be sent as-is
        ~^[0-9.]+$        "for=$remote_addr";

        # IPv6 addresses need to be bracketed and quoted
        ~^[0-9A-Fa-f:.]+$ "for=\"[$remote_addr]\"";

        # Unix domain socket names cannot be represented in RFC 7239 syntax
        default           "for=unknown";
    }

    map $http_forwarded $proxy_add_forwarded {
        # If the incoming Forwarded header is syntactically valid, append to it
        "~^(,[ \\t]*)*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*([ \\t]*,([ \\t]*([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?(;([!#$%&'*+.^_`|~0-9A-Za-z-]+=([!#$%&'*+.^_`|~0-9A-Za-z-]+|\"([\\t \\x21\\x23-\\x5B\\x5D-\\x7E\\x80-\\xFF]|\\\\[\\t \\x21-\\x7E\\x80-\\xFF])*\"))?)*)?)*$" "$http_forwarded, $proxy_forwarded_elem";

        # Otherwise, replace it
        default "$proxy_forwarded_elem";
    }

    access_log  /var/log/openresty/access.log  main;
    include    nginx_conf_white/layer7/*.conf;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout      35;
    client_body_timeout    10;
    client_header_timeout  10;
    send_timeout           10;

    server {
        listen  11621;
        server_name     127.0.0.1;
        location /ngx_status {
            stub_status on;
            access_log off;
        }
    }
    server {
        listen       80 default_server;
        server_name  _;
        access_log  logs/host.access.log  main;
        return 404;
    }
    server {
        listen       443 ssl default_server;
        server_name  _;

        ssl_certificate      nginx_conf_white/certs/rsq.cn.pem;
        ssl_certificate_key  nginx_conf_white/certs/rsq.cn.key;
        return 404;
    }
}