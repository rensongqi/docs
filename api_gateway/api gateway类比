# 1 API网关的基础作用

  API网关作为流量的入口，统一处理来自客户端（用户端）的请求，让请求更加快速、准确和安全的得到处理。

它最主要的作用包括以下两点：

- **路由转发**：接收外界的请求并转发到后端相应的微服务（服务发现、负载均衡）。
- **过滤**：在网关中可以实现请求的一系列横切功能（鉴权、限流以及监控等）。
此处思考：

关于路由转发这块，我们在网关上只转发来自于外部的请求（客户端的请求），内部服务之间的请求不走网关（当然也可以将所有服务的调用都走网关，那么几乎所有的功能都可以集成到网关中，但是这样的话，网关的压力将会非常大）

内部服务之间的请求权限校验要走网关吗
- API监控：监控经过网关的请求
- 限流：与监控配合，进行限流操作


# 2 API网关的高级作用

  随着用户流量的越来越庞大，同时，随着微服务架构的与时俱进，服务之间的流量也开始爆发性的增长。在现代的业务场景下，对API网关提出了更多更高级的要求：
- 云原生友好、架构轻巧、容器化
- 支持对接Prometheus等开源的监控组件
- 支持gRPC代理以及http到gRPC之间的协议转换，把用户的http请求转为内部服务的之间的gRPC请求
- 支持灵活的部署模式（单机、集群、私有云、公有云）
- 无状态，方便扩容和缩容

# 3 网关选型对比

| API网关    | Kong               | APISIX         | Trk        | Apigee                       | AWS  | Aliyun |
| ---------- | ------------------ | -------------- | ---------- | ---------------------------- | ---- | ------ |
| 部署模式   | 单机和集群         | 单机和集群     | 单机和集群 | 不支持单机                   | PaaS | PaaS   |
| 数据存储   | Postgres/Cassandra | etcd           | Redis      | Postgres/Cassandra/Zookeeper | PaaS | PaaS   |
| 是否开源   | Apache 2.0协议     | Apache 2.0协议 | MPL协议    | 否                           | 否   | 否     |
| 核心技术   | Nginx+Lua          | Nginx+Lua      | Golang     | 未知                         | 未知 | 未知   |
| 私有部署   | 是                 | 是             | 是         | 否                           | 否   | 否     |
| 自定义插件 | 是                 | 是             | 是         | 否                           | 否   | 否     |
| 社区活跃度 | 高                 | 高             | 高         | 中                           | 低   | 低     |
| 支持yaml   | 是                 | 是             | 否         | 否                           | 否   | 否     |


**参考文章：**
[ [1] 如何选择微服务 API 网关：对比 Kong、APISIX、Tyk、Apigee 和其他网关](https://zhuanlan.zhihu.com/p/81306020)
[ [2] 为什么微服务一定要有网关](https://zhuanlan.zhihu.com/p/101341556)